Program ::= ClassDeclaration+

ClassDeclaration ::= "class" Identifier "{" ClassBody "}"

ClassBody ::= VariableDeclaration* FunctionDeclaration*

VariableDeclaration ::= ("const" Identifier "=" Expression) | (Identifier "=" Expression) ";"

FunctionDeclaration ::= "func" Identifier "(" ParameterList? ")" Block

ParameterList ::= Identifier ("=" Expression)? ("," Identifier ("=" Expression)?)*

Block ::= "{" Statement* "}"

Statement ::= VariableDeclaration | IfStatement | WhileStatement | Assignment | FunctionCall | ReturnStatement | LogStatement ";"

IfStatement ::= "if" "(" Expression ")" Block (ElseIfStatement* ElseStatement?)

ElseIfStatement ::= "elseif" "(" Expression ")" Block

ElseStatement ::= "else" Block

WhileStatement ::= "while" "(" Expression ")" Block

Assignment ::= Identifier "=" Expression ";"

FunctionCall ::= Identifier "(" ArgumentList? ")" ";"

ArgumentList ::= Expression ("," Expression)*

ReturnStatement ::= "return" Expression? ";"

LogStatement ::= "console.log" "(" Expression ")"

Expression ::= Literal | Identifier | BinaryExpression | FunctionCallExpression | UnaryExpression | ParenthesizedExpression

BinaryExpression ::= Expression Operator Expression

FunctionCallExpression ::= Identifier "(" ArgumentList? ")"

UnaryExpression ::= ("-" | "!") Expression

ParenthesizedExpression ::= "(" Expression ")"

Operator ::= "+" | "-" | "*" | "/" | "==" | "!=" | "<" | "<=" | ">" | ">=" | "&&" | "||"

Literal ::= NumericLiteral | StringLiteral | BooleanLiteral | "null"

Identifier ::= [a-zA-Z_][a-zA-Z0-9_]*

NumericLiteral ::= [0-9]+

StringLiteral ::= '"' [^"]* '"' | "'" [^']* "'"

BooleanLiteral ::= "True" | "False"